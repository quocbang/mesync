// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kenda/mesync/services.proto

package mesync

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("kenda/mesync/services.proto", fileDescriptor_ed3fc8c61850e220) }

var fileDescriptor_ed3fc8c61850e220 = []byte{
	// 722 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0xd5, 0x4f, 0x5f, 0x03, 0x9a, 0x34, 0x34, 0x9d, 0x42, 0x4b, 0x1d, 0x10, 0xc5, 0x52,
	0x85, 0x14, 0xa9, 0xb6, 0x04, 0xbb, 0x8a, 0x15, 0x2d, 0x7f, 0x16, 0x45, 0xaa, 0x52, 0x75, 0x41,
	0x25, 0x28, 0x8e, 0x7d, 0x9b, 0x8e, 0xe2, 0x78, 0xdc, 0x99, 0x71, 0x4b, 0x41, 0x6c, 0x78, 0x05,
	0x1e, 0x8d, 0x57, 0x60, 0xc9, 0x43, 0x20, 0xdf, 0x19, 0x27, 0x76, 0x6c, 0xd7, 0x61, 0x99, 0x9c,
	0x3b, 0xe7, 0xe7, 0x39, 0xba, 0xf7, 0xda, 0xa4, 0x37, 0x86, 0x28, 0xf0, 0xdc, 0x09, 0xc8, 0x9b,
	0xc8, 0x77, 0x25, 0x88, 0x2b, 0xe6, 0x83, 0x74, 0x62, 0xc1, 0x15, 0xa7, 0x2b, 0x28, 0x3a, 0x5a,
	0xb4, 0x1e, 0x8d, 0x38, 0x1f, 0x85, 0xe0, 0x7a, 0x31, 0x73, 0xbd, 0x28, 0xe2, 0xca, 0x53, 0x8c,
	0x47, 0xa6, 0xd6, 0xea, 0x19, 0x15, 0x7f, 0x0d, 0x93, 0x73, 0x17, 0x26, 0xb1, 0xba, 0x31, 0xe2,
	0x66, 0x81, 0x92, 0x48, 0x10, 0x46, 0x78, 0x5c, 0x10, 0x02, 0x88, 0x3d, 0xa1, 0x26, 0x10, 0x29,
	0x23, 0x5b, 0xc5, 0xa7, 0xd3, 0xc4, 0x4a, 0xcf, 0x38, 0xf4, 0x32, 0x61, 0xab, 0x20, 0x08, 0xf0,
	0xb9, 0x08, 0xea, 0x24, 0x16, 0x83, 0x91, 0xb6, 0x0b, 0x52, 0xc8, 0x26, 0x4c, 0x79, 0xe2, 0xe6,
	0xec, 0x82, 0x27, 0xe6, 0x59, 0x9f, 0xff, 0x59, 0x25, 0xad, 0xf7, 0x28, 0xd3, 0x43, 0xd2, 0xde,
	0xbf, 0x00, 0x7f, 0x7c, 0x0c, 0xe2, 0x0a, 0x04, 0xdd, 0x70, 0xf4, 0xe5, 0x9d, 0xec, 0xf2, 0xce,
	0xeb, 0xf4, 0xf2, 0x56, 0xcd, 0xff, 0x76, 0xe7, 0xc7, 0xaf, 0xdf, 0x3f, 0xff, 0xbb, 0x43, 0x97,
	0xdd, 0x98, 0x45, 0x23, 0x7a, 0x4a, 0xda, 0xfb, 0x02, 0x3c, 0x05, 0x27, 0x12, 0x84, 0xa4, 0xdb,
	0x4e, 0x3e, 0x76, 0x27, 0x27, 0x0d, 0xe0, 0x32, 0x01, 0xa9, 0x6a, 0x7d, 0xd7, 0xd0, 0xb7, 0x6d,
	0xb7, 0x30, 0x62, 0xb9, 0xb7, 0xd4, 0xa7, 0x1f, 0x09, 0x39, 0x89, 0x03, 0x63, 0x40, 0x9f, 0x14,
	0xad, 0x67, 0x4a, 0x93, 0xf3, 0x06, 0x3a, 0x77, 0xad, 0xb6, 0x76, 0x76, 0xbf, 0xb1, 0xe0, 0x7b,
	0x6a, 0xff, 0x81, 0x90, 0x03, 0x08, 0xa1, 0xda, 0x7e, 0xa6, 0x34, 0xd9, 0x53, 0xb4, 0x5f, 0xe9,
	0x13, 0xb4, 0x47, 0x77, 0x7a, 0x46, 0xd6, 0xf4, 0xd5, 0x0f, 0xa6, 0x5d, 0x21, 0xe9, 0xd6, 0x3c,
	0x61, 0x2a, 0xd5, 0x7a, 0x6f, 0xa2, 0xf7, 0x9a, 0xbd, 0x92, 0x6b, 0x2f, 0x8c, 0x46, 0x92, 0xae,
	0x0e, 0x60, 0xe6, 0x42, 0x77, 0xaa, 0x02, 0x9a, 0xe9, 0x4d, 0xf7, 0xd8, 0x46, 0x96, 0x65, 0x75,
	0x73, 0x2c, 0x9d, 0x55, 0x2b, 0x82, 0xeb, 0x33, 0x16, 0xd0, 0x31, 0xe9, 0xea, 0x58, 0xea, 0xa1,
	0xf3, 0x7a, 0x13, 0xf4, 0x21, 0x42, 0x69, 0xbf, 0x04, 0xa5, 0x31, 0xa1, 0x3a, 0xc2, 0x63, 0x3d,
	0x39, 0x6f, 0x05, 0x4f, 0x62, 0xfa, 0xac, 0xaa, 0xbf, 0xf2, 0x15, 0x4d, 0xc0, 0x2d, 0x04, 0xae,
	0xdb, 0xf7, 0xb2, 0x89, 0xdc, 0x1d, 0xa5, 0xc7, 0xd2, 0x4c, 0xbf, 0x10, 0xaa, 0x33, 0xbb, 0x8d,
	0x58, 0xae, 0x68, 0x22, 0x3e, 0x45, 0x62, 0xcf, 0x5a, 0x2f, 0x12, 0x75, 0xb4, 0xff, 0xb3, 0xe8,
	0x9c, 0x53, 0x41, 0xa8, 0x0e, 0xee, 0x36, 0x72, 0xb9, 0xa2, 0x89, 0xdc, 0x43, 0xf2, 0x83, 0x7e,
	0x15, 0x99, 0x7e, 0xca, 0x5a, 0xf4, 0x48, 0xf0, 0x20, 0xf1, 0xd5, 0x51, 0xe8, 0x45, 0xf3, 0x43,
	0x60, 0x0a, 0x42, 0x2f, 0x6a, 0x42, 0x75, 0x11, 0x45, 0xec, 0x65, 0x5c, 0x66, 0x69, 0x9a, 0x97,
	0x64, 0xf5, 0x90, 0x49, 0xf5, 0x06, 0x20, 0x18, 0xe0, 0x1a, 0x2b, 0x2d, 0x87, 0x54, 0x36, 0x52,
	0x66, 0x6f, 0x97, 0x2b, 0x72, 0x06, 0x03, 0x88, 0xc3, 0x69, 0xcb, 0xd8, 0x1d, 0xf7, 0x1c, 0x20,
	0xd8, 0xd5, 0x3b, 0x12, 0x87, 0xe2, 0x2b, 0xa1, 0xe9, 0x89, 0x7d, 0x1e, 0x86, 0xe0, 0xab, 0xc5,
	0xa9, 0x3b, 0xe5, 0x8a, 0xa2, 0x87, 0x06, 0x9b, 0x38, 0xed, 0xae, 0xeb, 0x6b, 0x35, 0xcf, 0xfe,
	0x4c, 0x3a, 0x3a, 0xad, 0x01, 0x2e, 0x66, 0x49, 0xed, 0xaa, 0x28, 0x8d, 0xd8, 0x94, 0xe6, 0x3a,
	0x92, 0x3a, 0xf6, 0x5d, 0xb3, 0xe6, 0x91, 0x30, 0x22, 0x1d, 0xdd, 0x02, 0x35, 0x84, 0x82, 0xd8,
	0x44, 0xb0, 0x90, 0x70, 0xdf, 0x5e, 0xcd, 0x08, 0x6e, 0x80, 0xc7, 0x53, 0x50, 0x94, 0x75, 0xc6,
	0x71, 0x32, 0x94, 0x8a, 0xa9, 0x44, 0x81, 0xac, 0x19, 0xbc, 0xac, 0x80, 0xf1, 0x68, 0xc1, 0x49,
	0xb7, 0x3b, 0xae, 0xcc, 0x9d, 0x32, 0x3c, 0x33, 0x55, 0xf5, 0xbc, 0xb9, 0x82, 0xc5, 0x79, 0x56,
	0x99, 0xc7, 0xa7, 0xd3, 0x96, 0x13, 0x6a, 0xa6, 0xed, 0xdf, 0x81, 0xfd, 0x32, 0x70, 0xba, 0xca,
	0x0e, 0xcd, 0x9b, 0xf9, 0x1d, 0x4f, 0x44, 0x75, 0xa2, 0xf9, 0x8a, 0xc5, 0x57, 0x59, 0xf6, 0xc6,
	0xdf, 0x4d, 0xdf, 0xf8, 0x7b, 0x4b, 0xfd, 0x57, 0x2f, 0x4f, 0xf7, 0x46, 0x4c, 0x85, 0xde, 0xd0,
	0x30, 0x7c, 0x3e, 0x71, 0xd4, 0xb5, 0x5b, 0xfc, 0xea, 0x18, 0x8f, 0x66, 0x1f, 0x3c, 0x79, 0x65,
	0xd8, 0xc2, 0xbf, 0x5f, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x26, 0x26, 0xf4, 0xbd, 0x60, 0x09,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MesyncClient is the client API for Mesync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MesyncClient interface {
	// Check server status
	//
	// To make sure server is active based on http.StatusCode.
	CheckServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// 新增人員
	//
	//   - 檢查使用者 id 是否重複
	//   - 檢查 departmentID 是否有維護部門資料
	//   - 建立使用者
	//
	// Required:
	//   - id
	//   - departmentID
	CreateUsers(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 更新人員
	//
	//   - 檢查使用者 id 是否重複
	//   - 有給departmentID 檢查是否有維護部門資料
	//   - 更新人員部門代號 or 離職日
	//
	// Required:
	//   - id
	//   - department_id, leave_date(MUST be in UTC locale) 至少選擇一個更新項目
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 刪除人員
	//
	//   - 刪除指定工號/帳號資料
	//
	// Required:
	//   - id
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 新增部門
	//
	//   - 檢查部門 id 是否重複
	//   - 新增部門資訊
	//
	// Required:
	//   - id
	CreateDepartments(ctx context.Context, in *Departments, opts ...grpc.CallOption) (*empty.Empty, error)
	// 修改部門
	//
	//   - 檢查部門 id 是否存在
	//   - 更新部門代號
	//
	// Required:
	//   - id
	//   - newID
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 刪除部門
	//
	// Required:
	//   - id
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 新增機台群組
	//
	//   - 檢查群組 id 是否重複
	//   - 檢查機台是否存在
	//   - 新增群組
	//
	// Required:
	//   - id
	//   - info.stations
	CreateStationGroup(ctx context.Context, in *CreateStationGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 更新機台群組
	//
	//   - 檢查群組 id 是否存在
	//   - 檢查更新機台是否存在
	//   - 更新群組
	//
	// Required:
	//   - id
	//   - info.stations
	UpdateStationGroup(ctx context.Context, in *UpdateStationGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 刪除機台群組
	//
	//   - 刪除群組
	//
	// Required:
	//   - id
	DeleteStationGroup(ctx context.Context, in *DeleteStationGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Creates a new product plan
	//
	// DO:
	// 1. check if departmentID and productID are existed
	// 2. quantity = day quantity, must be greater than zero
	// 3. check if the request's productID has already been created on the request's date & departmentID
	// 4. create plan.
	//
	// @Param: CreatePlanRequest as plan info, all fields are required.
	// The date field in CreatePlanRequest MUST be in UTC locale.
	CreateProductPlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 查詢產品投入紀錄
	//
	//   - 檢查指定部門是否存在
	//   - 取得該部門在指定日期下的生產投料紀錄
	//
	// Required:
	//   - date (MUST be in UTC locale)
	//   - departmentID
	ListFeedRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListFeedRecordsReply, error)
	// 查詢產品產出紀錄
	//
	//   - 檢查指定部門是否存在
	//   - 取得該部門在指定日期下的產品生產紀錄
	//
	// Required:
	//   - date (MUST be in UTC locale)
	//   - departmentID
	ListCollectRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListCollectRecordsReply, error)
	// 新增多筆配合配方表
	//
	// @Param: all fields are required.
	// 若生產批量為非固定值, 允許給空字串, 表示為由派發人員決定生產批量的值.
	CreateRecipes(ctx context.Context, in *CreateRecipesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// 刪除指定配合配方表
	//
	// ids is required.
	DeleteRecipes(ctx context.Context, in *DeleteRecipesRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Make materials as substitutions of the given material
	//
	// All fields are required, except material.grade field.
	CreateSubstitutes(ctx context.Context, in *CreateSubstitutionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Update substitutions of the given material
	//
	// Make materials as substitutions of the given material if there is no substitution
	// of the given material. Or, replace substitutions of the given material.
	// All fields are required, except material.grade field.
	UpdateSubstitutes(ctx context.Context, in *UpdateSubstitutionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete substitutions of the given material
	//
	// If:
	//   - 'all' field is true, all of substitutions will be deleted.
	//   - 'multiple' field is set, the given substitutions will be deleted.
	//
	// It returns no error even if the given material has no substitution or substitutions
	// doesn't match any of substitutions of the given material.
	DeleteSubstitution(ctx context.Context, in *DeleteSubstitutionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Create a new Limitary-Hour
	//
	// Required:
	//   - productType
	//
	// Note:
	//   - MIN and MAX must be greater than 0
	//   - MIN must be less than MAX
	CreateLimitaryHour(ctx context.Context, in *CreateLimitaryHourRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type mesyncClient struct {
	cc *grpc.ClientConn
}

func NewMesyncClient(cc *grpc.ClientConn) MesyncClient {
	return &mesyncClient{cc}
}

func (c *mesyncClient) CheckServer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/CheckServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) CreateUsers(ctx context.Context, in *CreateUsersRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/CreateUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) CreateDepartments(ctx context.Context, in *Departments, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/CreateDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) CreateStationGroup(ctx context.Context, in *CreateStationGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/CreateStationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) UpdateStationGroup(ctx context.Context, in *UpdateStationGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/UpdateStationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) DeleteStationGroup(ctx context.Context, in *DeleteStationGroupRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/DeleteStationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) CreateProductPlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/CreateProductPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) ListFeedRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListFeedRecordsReply, error) {
	out := new(ListFeedRecordsReply)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/ListFeedRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) ListCollectRecords(ctx context.Context, in *ListRecordsRequest, opts ...grpc.CallOption) (*ListCollectRecordsReply, error) {
	out := new(ListCollectRecordsReply)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/ListCollectRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) CreateRecipes(ctx context.Context, in *CreateRecipesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/CreateRecipes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) DeleteRecipes(ctx context.Context, in *DeleteRecipesRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/DeleteRecipes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) CreateSubstitutes(ctx context.Context, in *CreateSubstitutionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/CreateSubstitutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) UpdateSubstitutes(ctx context.Context, in *UpdateSubstitutionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/UpdateSubstitutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) DeleteSubstitution(ctx context.Context, in *DeleteSubstitutionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/DeleteSubstitution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mesyncClient) CreateLimitaryHour(ctx context.Context, in *CreateLimitaryHourRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/kenda.mesync.Mesync/CreateLimitaryHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MesyncServer is the server API for Mesync service.
type MesyncServer interface {
	// Check server status
	//
	// To make sure server is active based on http.StatusCode.
	CheckServer(context.Context, *empty.Empty) (*empty.Empty, error)
	// 新增人員
	//
	//   - 檢查使用者 id 是否重複
	//   - 檢查 departmentID 是否有維護部門資料
	//   - 建立使用者
	//
	// Required:
	//   - id
	//   - departmentID
	CreateUsers(context.Context, *CreateUsersRequest) (*empty.Empty, error)
	// 更新人員
	//
	//   - 檢查使用者 id 是否重複
	//   - 有給departmentID 檢查是否有維護部門資料
	//   - 更新人員部門代號 or 離職日
	//
	// Required:
	//   - id
	//   - department_id, leave_date(MUST be in UTC locale) 至少選擇一個更新項目
	UpdateUser(context.Context, *UpdateUserRequest) (*empty.Empty, error)
	// 刪除人員
	//
	//   - 刪除指定工號/帳號資料
	//
	// Required:
	//   - id
	DeleteUser(context.Context, *DeleteUserRequest) (*empty.Empty, error)
	// 新增部門
	//
	//   - 檢查部門 id 是否重複
	//   - 新增部門資訊
	//
	// Required:
	//   - id
	CreateDepartments(context.Context, *Departments) (*empty.Empty, error)
	// 修改部門
	//
	//   - 檢查部門 id 是否存在
	//   - 更新部門代號
	//
	// Required:
	//   - id
	//   - newID
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*empty.Empty, error)
	// 刪除部門
	//
	// Required:
	//   - id
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*empty.Empty, error)
	// 新增機台群組
	//
	//   - 檢查群組 id 是否重複
	//   - 檢查機台是否存在
	//   - 新增群組
	//
	// Required:
	//   - id
	//   - info.stations
	CreateStationGroup(context.Context, *CreateStationGroupRequest) (*empty.Empty, error)
	// 更新機台群組
	//
	//   - 檢查群組 id 是否存在
	//   - 檢查更新機台是否存在
	//   - 更新群組
	//
	// Required:
	//   - id
	//   - info.stations
	UpdateStationGroup(context.Context, *UpdateStationGroupRequest) (*empty.Empty, error)
	// 刪除機台群組
	//
	//   - 刪除群組
	//
	// Required:
	//   - id
	DeleteStationGroup(context.Context, *DeleteStationGroupRequest) (*empty.Empty, error)
	// Creates a new product plan
	//
	// DO:
	// 1. check if departmentID and productID are existed
	// 2. quantity = day quantity, must be greater than zero
	// 3. check if the request's productID has already been created on the request's date & departmentID
	// 4. create plan.
	//
	// @Param: CreatePlanRequest as plan info, all fields are required.
	// The date field in CreatePlanRequest MUST be in UTC locale.
	CreateProductPlan(context.Context, *CreatePlanRequest) (*empty.Empty, error)
	// 查詢產品投入紀錄
	//
	//   - 檢查指定部門是否存在
	//   - 取得該部門在指定日期下的生產投料紀錄
	//
	// Required:
	//   - date (MUST be in UTC locale)
	//   - departmentID
	ListFeedRecords(context.Context, *ListRecordsRequest) (*ListFeedRecordsReply, error)
	// 查詢產品產出紀錄
	//
	//   - 檢查指定部門是否存在
	//   - 取得該部門在指定日期下的產品生產紀錄
	//
	// Required:
	//   - date (MUST be in UTC locale)
	//   - departmentID
	ListCollectRecords(context.Context, *ListRecordsRequest) (*ListCollectRecordsReply, error)
	// 新增多筆配合配方表
	//
	// @Param: all fields are required.
	// 若生產批量為非固定值, 允許給空字串, 表示為由派發人員決定生產批量的值.
	CreateRecipes(context.Context, *CreateRecipesRequest) (*empty.Empty, error)
	// 刪除指定配合配方表
	//
	// ids is required.
	DeleteRecipes(context.Context, *DeleteRecipesRequest) (*empty.Empty, error)
	// Make materials as substitutions of the given material
	//
	// All fields are required, except material.grade field.
	CreateSubstitutes(context.Context, *CreateSubstitutionRequest) (*empty.Empty, error)
	// Update substitutions of the given material
	//
	// Make materials as substitutions of the given material if there is no substitution
	// of the given material. Or, replace substitutions of the given material.
	// All fields are required, except material.grade field.
	UpdateSubstitutes(context.Context, *UpdateSubstitutionRequest) (*empty.Empty, error)
	// Delete substitutions of the given material
	//
	// If:
	//   - 'all' field is true, all of substitutions will be deleted.
	//   - 'multiple' field is set, the given substitutions will be deleted.
	//
	// It returns no error even if the given material has no substitution or substitutions
	// doesn't match any of substitutions of the given material.
	DeleteSubstitution(context.Context, *DeleteSubstitutionRequest) (*empty.Empty, error)
	// Create a new Limitary-Hour
	//
	// Required:
	//   - productType
	//
	// Note:
	//   - MIN and MAX must be greater than 0
	//   - MIN must be less than MAX
	CreateLimitaryHour(context.Context, *CreateLimitaryHourRequest) (*empty.Empty, error)
}

func RegisterMesyncServer(s *grpc.Server, srv MesyncServer) {
	s.RegisterService(&_Mesync_serviceDesc, srv)
}

func _Mesync_CheckServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).CheckServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/CheckServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).CheckServer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_CreateUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).CreateUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/CreateUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).CreateUsers(ctx, req.(*CreateUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_CreateDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Departments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).CreateDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/CreateDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).CreateDepartments(ctx, req.(*Departments))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_CreateStationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).CreateStationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/CreateStationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).CreateStationGroup(ctx, req.(*CreateStationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_UpdateStationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).UpdateStationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/UpdateStationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).UpdateStationGroup(ctx, req.(*UpdateStationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_DeleteStationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).DeleteStationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/DeleteStationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).DeleteStationGroup(ctx, req.(*DeleteStationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_CreateProductPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).CreateProductPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/CreateProductPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).CreateProductPlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_ListFeedRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).ListFeedRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/ListFeedRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).ListFeedRecords(ctx, req.(*ListRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_ListCollectRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).ListCollectRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/ListCollectRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).ListCollectRecords(ctx, req.(*ListRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_CreateRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).CreateRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/CreateRecipes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).CreateRecipes(ctx, req.(*CreateRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_DeleteRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).DeleteRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/DeleteRecipes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).DeleteRecipes(ctx, req.(*DeleteRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_CreateSubstitutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).CreateSubstitutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/CreateSubstitutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).CreateSubstitutes(ctx, req.(*CreateSubstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_UpdateSubstitutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).UpdateSubstitutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/UpdateSubstitutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).UpdateSubstitutes(ctx, req.(*UpdateSubstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_DeleteSubstitution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubstitutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).DeleteSubstitution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/DeleteSubstitution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).DeleteSubstitution(ctx, req.(*DeleteSubstitutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mesync_CreateLimitaryHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLimitaryHourRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MesyncServer).CreateLimitaryHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kenda.mesync.Mesync/CreateLimitaryHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MesyncServer).CreateLimitaryHour(ctx, req.(*CreateLimitaryHourRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mesync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kenda.mesync.Mesync",
	HandlerType: (*MesyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckServer",
			Handler:    _Mesync_CheckServer_Handler,
		},
		{
			MethodName: "CreateUsers",
			Handler:    _Mesync_CreateUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Mesync_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Mesync_DeleteUser_Handler,
		},
		{
			MethodName: "CreateDepartments",
			Handler:    _Mesync_CreateDepartments_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _Mesync_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _Mesync_DeleteDepartment_Handler,
		},
		{
			MethodName: "CreateStationGroup",
			Handler:    _Mesync_CreateStationGroup_Handler,
		},
		{
			MethodName: "UpdateStationGroup",
			Handler:    _Mesync_UpdateStationGroup_Handler,
		},
		{
			MethodName: "DeleteStationGroup",
			Handler:    _Mesync_DeleteStationGroup_Handler,
		},
		{
			MethodName: "CreateProductPlan",
			Handler:    _Mesync_CreateProductPlan_Handler,
		},
		{
			MethodName: "ListFeedRecords",
			Handler:    _Mesync_ListFeedRecords_Handler,
		},
		{
			MethodName: "ListCollectRecords",
			Handler:    _Mesync_ListCollectRecords_Handler,
		},
		{
			MethodName: "CreateRecipes",
			Handler:    _Mesync_CreateRecipes_Handler,
		},
		{
			MethodName: "DeleteRecipes",
			Handler:    _Mesync_DeleteRecipes_Handler,
		},
		{
			MethodName: "CreateSubstitutes",
			Handler:    _Mesync_CreateSubstitutes_Handler,
		},
		{
			MethodName: "UpdateSubstitutes",
			Handler:    _Mesync_UpdateSubstitutes_Handler,
		},
		{
			MethodName: "DeleteSubstitution",
			Handler:    _Mesync_DeleteSubstitution_Handler,
		},
		{
			MethodName: "CreateLimitaryHour",
			Handler:    _Mesync_CreateLimitaryHour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kenda/mesync/services.proto",
}
