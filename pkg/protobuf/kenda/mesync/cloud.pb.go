// Code generated by protoc-gen-go. DO NOT EDIT.
// source: kenda/mesync/cloud.proto

package mesync

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("kenda/mesync/cloud.proto", fileDescriptor_b4da9574d115ef46) }

var fileDescriptor_b4da9574d115ef46 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xcf, 0x31, 0x4a, 0xc7, 0x30,
	0x14, 0xc7, 0x71, 0x2a, 0xe8, 0x10, 0x9c, 0x2a, 0x68, 0xa9, 0xa2, 0xd0, 0x49, 0x04, 0x5f, 0x40,
	0xb7, 0xe2, 0x54, 0xf1, 0x02, 0x82, 0x8b, 0x5b, 0xd2, 0xc6, 0x50, 0x9a, 0xe6, 0xc5, 0xe6, 0x15,
	0xe9, 0xea, 0x15, 0x3c, 0x9a, 0x57, 0xf0, 0x20, 0xd2, 0xa4, 0x7f, 0xda, 0x8e, 0xc9, 0x37, 0xf0,
	0xc9, 0x8f, 0x65, 0x9d, 0xb2, 0x8d, 0xe0, 0xbd, 0xf2, 0x93, 0xad, 0x79, 0x6d, 0x70, 0x6c, 0xc0,
	0x0d, 0x48, 0x98, 0x9e, 0x86, 0x02, 0xb1, 0xe4, 0x57, 0x1a, 0x51, 0x1b, 0xc5, 0x85, 0x6b, 0xb9,
	0xb0, 0x16, 0x49, 0x50, 0x8b, 0xd6, 0xc7, 0xb7, 0xf9, 0xe5, 0x52, 0xc3, 0x49, 0x8e, 0x1f, 0x5c,
	0xf5, 0x8e, 0xa6, 0x25, 0x5e, 0xec, 0x08, 0x69, 0x50, 0xc6, 0xf0, 0xe0, 0xd8, 0xf1, 0xf3, 0x0c,
	0xa6, 0x9a, 0xb1, 0x37, 0x67, 0x50, 0x34, 0x95, 0x41, 0x99, 0xde, 0xc0, 0x56, 0x86, 0xb5, 0xbc,
	0xaa, 0xcf, 0x51, 0x79, 0xca, 0xcf, 0x21, 0x72, 0x70, 0xe0, 0xe0, 0x65, 0xe6, 0x8a, 0xeb, 0xef,
	0xdf, 0xbf, 0x9f, 0xa3, 0xac, 0x38, 0x8b, 0x3b, 0x02, 0x75, 0xef, 0x09, 0x07, 0xa1, 0x55, 0x99,
	0xdc, 0xdd, 0x26, 0xd5, 0xd3, 0x7b, 0xa9, 0x5b, 0x32, 0x42, 0x2e, 0x44, 0x8d, 0x3d, 0xd0, 0x17,
	0xdf, 0x7d, 0xd0, 0x75, 0x7a, 0xdd, 0xb1, 0x2d, 0xf2, 0x24, 0x5c, 0x3f, 0xfe, 0x07, 0x00, 0x00,
	0xff, 0xff, 0xac, 0xbe, 0x73, 0x0e, 0x34, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CloudClient is the client API for Cloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudClient interface {
	// Uploading production parameters to blob storage.
	// You should call this function after sorting the request by time.
	UploadBlob(ctx context.Context, opts ...grpc.CallOption) (Cloud_UploadBlobClient, error)
}

type cloudClient struct {
	cc *grpc.ClientConn
}

func NewCloudClient(cc *grpc.ClientConn) CloudClient {
	return &cloudClient{cc}
}

func (c *cloudClient) UploadBlob(ctx context.Context, opts ...grpc.CallOption) (Cloud_UploadBlobClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Cloud_serviceDesc.Streams[0], "/kenda.mesync.Cloud/UploadBlob", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudUploadBlobClient{stream}
	return x, nil
}

type Cloud_UploadBlobClient interface {
	Send(*UploadBlobRequest) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type cloudUploadBlobClient struct {
	grpc.ClientStream
}

func (x *cloudUploadBlobClient) Send(m *UploadBlobRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudUploadBlobClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudServer is the server API for Cloud service.
type CloudServer interface {
	// Uploading production parameters to blob storage.
	// You should call this function after sorting the request by time.
	UploadBlob(Cloud_UploadBlobServer) error
}

func RegisterCloudServer(s *grpc.Server, srv CloudServer) {
	s.RegisterService(&_Cloud_serviceDesc, srv)
}

func _Cloud_UploadBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudServer).UploadBlob(&cloudUploadBlobServer{stream})
}

type Cloud_UploadBlobServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*UploadBlobRequest, error)
	grpc.ServerStream
}

type cloudUploadBlobServer struct {
	grpc.ServerStream
}

func (x *cloudUploadBlobServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudUploadBlobServer) Recv() (*UploadBlobRequest, error) {
	m := new(UploadBlobRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Cloud_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kenda.mesync.Cloud",
	HandlerType: (*CloudServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBlob",
			Handler:       _Cloud_UploadBlob_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "kenda/mesync/cloud.proto",
}
